import React, { useEffect, useState } from 'react';
import axios from 'axios';
import "./CompanyList.css";
import { Company } from '../types/Company';
import { Link } from 'react-router-dom';

// –¢–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ Company, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
type SortKey = keyof Company;

const API_URL = import.meta.env.VITE_API_URL;

console.log('üåê VITE_API_URL:', API_URL);
console.log('üß™ API_URL in CompanyList:', import.meta.env.VITE_API_URL);

const CompanyList: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
  const [companies, setCompanies] = useState<Company[]>([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 'name')
  const [sortKey, setSortKey] = useState<SortKey>('name');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: true = –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, false = –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  const [sortAsc, setSortAsc] = useState(true);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å
  const [companyToDelete, setCompanyToDelete] = useState<Company | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    axios
    .get(`${API_URL}/companies/`) // ‚úÖ —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ
      .then(response => {
        const valid = response.data.filter(
          (c: Company) => c.id !== undefined && c.name?.trim() !== ''
        );
        setCompanies(valid);
      })
      .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–∞–Ω–∏–π:', error));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
  const handleSort = (key: keyof Company) => {
    setSortKey(key);
    setSortAsc(prev => (key === sortKey ? !prev : true)); // –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫, –µ—Å–ª–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
  const sortedCompanies = [...companies].sort((a, b) => {
    if (a[sortKey] < b[sortKey]) return sortAsc ? -1 : 1;
    if (a[sortKey] > b[sortKey]) return sortAsc ? 1 : -1;
    return 0;
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
  const handleDelete = (company: Company) => {
    setCompanyToDelete(company);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ DELETE-–∑–∞–ø—Ä–æ—Å–∞
  const confirmDeleteCompany = async () => {
    if (!companyToDelete) return;

    try {
      await axios.delete(`${API_URL}/companies/${companyToDelete.id}`); // ‚úÖ —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –Ω–µ –Ω—É–∂–µ–Ω
      setCompanies(prev => prev.filter(c => c.id !== companyToDelete.id)); // —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
      setCompanyToDelete(null); // –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.');
    }
  };

  return (
    <div className="company-list-wrapper">
      <h2>–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π</h2>
  
      <table className="company-table">
        <thead>
          <tr>
            <th onClick={() => handleSort('name')}>Name</th>
            <th onClick={() => handleSort('city')}>City</th>
            <th>Website</th>
            {/* <th>Email</th>
            <th>LinkedIn</th>
            <th>Latitude</th>
            <th>Longitude</th> */}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {sortedCompanies.map(company => (
            <tr key={company.id}>
              <td>{company.name}</td>
              <td>{company.city}</td>
              <td>{company.website}</td>
              {/* <td>{company.email}</td>
              <td>{company.linkedin}</td>
              <td>{company.latitude}</td>
              <td>{company.longitude}</td> */}
              <td>
                <Link to={`/edit/${company.id}`} className="action-edit">Edit ‚úèÔ∏è</Link>
                <span> | </span>
                <button className="action-delete" onClick={() => handleDelete(company)}>Delete üóëÔ∏è</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
  
      {companyToDelete && (
        <div className="modal-overlay">
          <div className="modal">
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <strong>{companyToDelete.name}</strong>?</p>
            <div className="modal-buttons">
              <button className="confirm" onClick={confirmDeleteCompany}>–£–¥–∞–ª–∏—Ç—å</button>
              <button className="cancel" onClick={() => setCompanyToDelete(null)}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompanyList;